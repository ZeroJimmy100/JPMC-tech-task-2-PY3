From 84bb36529ea37158151f99649be0e3edb80aa5a8 Mon Sep 17 00:00:00 2001
From: Jimmy Pham <jimmyp.dev3@gmail.com>
Date: Wed, 3 Jun 2020 05:03:48 -0700
Subject: [PATCH] Create Patch File

---
 src/App.tsx         | 65 ++++++++++++++++++++++++++++++++++++++++-----
 src/DataStreamer.ts | 20 ++++++++++++++
 src/Graph.tsx       | 38 ++++++++++++++++++++++++--
 3 files changed, 115 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..d16f010 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,23 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import { Server, ServerResponse } from 'http';
 
 /**
  * State declaration for <App />
  */
+
+/*
+In this case, whenever a type of IState
+is used our application know that it should always have data and showGraph as properties to be valid
+*/
 interface IState {
   data: ServerRespond[],
+
+  /*
+    Adding a boolean showGraph, switching between true & false if want to show or not 
+  */
+  showGraph: boolean,
 }
 
 /**
@@ -22,27 +33,62 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
   /**
    * Render Graph react component with state.data parse as property data
    */
+
+  /*
+    add a condition to only render the graph when the
+    state’s `showGraph` property of the App’s state is `true`
+  */
+
+  /*
+    we had to do this because renderGraph gets called in the render method of the App component
+  */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph)
+    {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({ 
+          data: serverResponds, 
+          showGraph: true,
+        });
+      });
+      x++;
+      if(x > 1000)
+      {
+        clearInterval(interval);
+      }
+    }, 100);
+    
   }
 
+  // Attempt to make a function that stops the server & table but instead it still runs
+  // stopDataFromServer() {
+  //   DataStreamer.stopData((serverResponds: ServerRespond[]) => {
+  //     this.setState({
+  //       data: serverResponds,
+  //       showGraph: false,
+  //     });
+  //   });
+  // }
+
   /**
    * Render the App react component
    */
@@ -62,6 +108,13 @@ class App extends Component<{}, IState> {
             onClick={() => {this.getDataFromServer()}}>
             Start Streaming Data
           </button>
+
+          {/* <button className="btn btn-danger"
+          // Adding a stop button to streaming
+          onClick={() => {this.stopDataFromServer()}}>
+            Stop Streaming Data
+          </button> */}
+          
           <div className="Graph">
             {this.renderGraph()}
           </div>
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..1ca8b08 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -1,3 +1,5 @@
+import { request } from "http";
+
 export interface Order {
   price: Number,
   size: Number,
@@ -34,7 +36,25 @@ class DataStreamer {
     }
 
     request.send();
+
   }
+
+  // attempt to stop retrieving data 
+  // static stopData(callback: (data: ServerRespond[]) => void): void {
+  //   const stopRequest = new XMLHttpRequest;
+  //   stopRequest.open('GET', DataStreamer.API_URL, false);
+
+  //   stopRequest.onload = () => {
+  //     if(stopRequest.status === 200) {
+  //       callback(JSON.parse(stopRequest.responseText));
+  //     }else {
+  //       alert('Request Failed');
+  //     }
+  //   }
+    
+  //   stopRequest.abort();
+
+  // }
 }
 
 export default DataStreamer;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..491fc85 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,11 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // before:
+    // const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+
+    // after: 
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -48,7 +52,37 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
+
+      ///////////////////////////////////////////////////////
+      // loading the table in different aspects 
       elem.load(this.table);
+      ///////////////////////////////////////////////////////
+      // loads a graph in a continuous line, also view is known as a grid type
+      elem.setAttribute('view', 'y_line');
+      ///////////////////////////////////////////////////////
+      // column-pivots is what allow us to distinguish stock ABC with DEF, the array -
+      // - known as stock (["stock"]) is the corresponding value. In addition, the reason -
+      // - why this works because the stock here is defined in the schema object
+      elem.setAttribute('column-pivots', '["stock"]');
+      ///////////////////////////////////////////////////////
+      // row-pivots takes care of our x-axis. Thus allow us to map each datapoint based on the - 
+      // - timestamp it has. Without this, the x-axis would be blank
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      ///////////////////////////////////////////////////////
+      // columns only focus on a particular part of the stock's data along the y-axis. Without this, the - 
+      // - graph will plot different datapoints of the stocks (top_ask_price, top_bid_price, stock, timestamp) 
+      // - but for this graph, we only care about top_ask_price
+      elem.setAttribute('columns', '["top_ask_price"]');
+      ///////////////////////////////////////////////////////
+      // aggregates handle the duplicate data that we observed earlier and consolidate them as just one data point. 
+      // In this case, we only want to consider a unique data point if it has unique stock name and timestamp.
+      // Otherwise, if there are duplicates like what we had before, we will average out the top_bid_prices and the - 
+      // - top_ask_prices of these 'similar' datapoints before treating them as one.
+      elem.setAttribute('aggregates', 
+      `{"stock": "distinct count",
+        "top_ask_price": "avg",
+        "top_bid_price": "avg",
+        "timestamp": "distinct count"}`);
     }
   }
 
-- 
2.27.0.windows.1

